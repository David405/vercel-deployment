generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id              String    @id @default(uuid())
  username        String    @unique
  bio             String?
  avatar          String?   
  email           String?   @unique
  nonce           String    // For wallet authentication
  turnkeyWallet   String?   // For turnkey wallet setup
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  web3Accounts    Web3Account[]
  socialAccounts  SocialAccount[]

  // Relationships
  followers       Follow[]  @relation("UserFollowers")
  following       Follow[]  @relation("UserFollowing")
  posts           Post[]
  comments        Comment[]
  likes           Like[]          // Added relation to Like model
  replies         Reply[]         // Added relation to Reply model

}

model Web3Account {
  id        String   @id @default(uuid())
  userId    String
  address   String
  chain     Chain
  isVerified Boolean @default(false)
  user      User     @relation(fields: [userId], references: [id])

  onchainActivities OnchainActivity[]

  @@unique([address, chain])
  @@index([userId])
}

model SocialAccount {
  id         String   @id @default(uuid())
  userId     String
  platform   SocialPlatform
  username   String
  user       User     @relation(fields: [userId], references: [id])

  @@unique([platform, username])
  @@index([userId])
}

model Follow {
  id            String   @id @default(uuid())
  followerId    String
  followingId   String
  createdAt     DateTime @default(now())
  follower      User     @relation("UserFollowers", fields: [followerId], references: [id])
  following     User     @relation("UserFollowing", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
  @@index([followerId, followingId])  // Optimized index for efficient lookups
}

model Post {
  id                String          @id @default(uuid())
  userId            String
  onchainActivityId String
  content           String
  mediaUrl          String?         // IPFS/Ceramic link
  createdAt         DateTime        @default(now())
  
  views             Int             @default(0) // Engagement tracker
  likesCount        Int             @default(0)
  dislikesCount     Int             @default(0) 
  commentsCount     Int             @default(0)

  dislikes          Dislike[]       // Reference to Dislike model
  user              User            @relation(fields: [userId], references: [id])
  onchainActivity   OnchainActivity @relation(fields: [onchainActivityId], references: [id])

  comments          Comment[]
  likes             Like[]

  @@index([userId])
  @@index([onchainActivityId])
}

model Comment {
  id        String   @id @default(uuid())
  postId    String
  userId    String
  content   String
  createdAt DateTime @default(now())

  views     Int      @default(0) // Engagement
  likesCount        Int             @default(0)
  dislikesCount     Int             @default(0) 
  
  likes     Like[]   // Reference to Like model
  dislikes  Dislike[] // Reference to Dislike model

  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  replies   Reply[]  // Reference to Reply model

  @@index([postId])
  @@index([userId])
}

model Like {
  id        String   @id @default(uuid())
  postId    String?
  commentId String?
  replyId   String?
  userId    String
  createdAt DateTime @default(now())

  post      Post?    @relation(fields: [postId], references: [id])
  comment   Comment? @relation(fields: [commentId], references: [id])
  reply     Reply?   @relation(fields: [replyId], references: [id]) 
  user      User     @relation(fields: [userId], references: [id]) // Added relation to User
  
  @@unique([postId, userId])
  @@unique([commentId, userId]) // Ensure uniqueness for likes on comments
  @@unique([replyId, userId])    // Ensure uniqueness for likes on replies
  @@index([postId])
  @@index([commentId])
  @@index([replyId])              // Index for replyId
}

model Dislike {
  id        String   @id @default(uuid())
  postId    String?
  commentId String?
  replyId   String?  // Added to reference Reply
  userId    String
  createdAt DateTime @default(now())

  post      Post?    @relation(fields: [postId], references: [id])
  comment   Comment? @relation(fields: [commentId], references: [id])
  reply     Reply?   @relation(fields: [replyId], references: [id]) // Added relation to Reply
  
  @@unique([postId, userId])
  @@unique([commentId, userId]) // Ensure uniqueness for likes on comments
  @@unique([replyId, userId])    // Ensure uniqueness for dislikes on replies
  @@index([postId])
  @@index([commentId])
  @@index([replyId])              // Index for replyId
}

model Reply {
  id        String   @id @default(uuid())
  commentId String
  userId    String
  content   String
  createdAt DateTime @default(now())

  likes     Like[]   // Reference to Like model
  dislikes  Dislike[] // Reference to Dislike model

  comment   Comment   @relation(fields: [commentId], references: [id])
  user      User      @relation(fields: [userId], references: [id])

  @@index([commentId])
  @@index([userId])
}

model OnchainActivity {
  id        String   @id @default(uuid())
  web3AccountId String
  activityType String  // e.g., "NFT_MINT", "SWAP", "DEPOSIT"
  txHash    String   @unique
  chain     Chain?
  metadata  Json?    
  createdAt DateTime @default(now())

  web3Account Web3Account @relation(fields: [web3AccountId], references: [id])
  posts       Post[]
  
  @@index([web3AccountId])
}

enum Chain {
  ethereum
  solana
}

enum SocialPlatform {
  twitter
  github
  discord
}
